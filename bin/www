#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require( '../server' );
var http = require( 'http' );


var port = normalizePort( process.env.PORT || '3000' );
app.set( 'port', port );

var server = http.createServer( app );

// Create listeners
server.on( 'error', onError );
server.on('listening', onListening);

// Syncronize the models
models.sequelize.sync()
  // when sucessful
  .then(function() {
    // start to listen
    server.listen( port );
  });

// Normalize a port into a number, string, or false.
var normalizePort = function( val ) {
  var parsedPort = parseInt( val, 10 );

  if ( isNaN( parsedPort ) ) {
    // named pipe
    return val;
  }

  if ( parsedPort >= 0 ) {
    // port number
    return parsedPort;
  }

  return false;
};


// Event listener for HTTP server "error" event.
var onError = function( error ) {
  if ( error.syscall !== 'listen' ) {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch ( error.code ) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit( 1 );
      break;
    default:
      throw error;
  }
};

// Event listener for HTTP server "listening" event.
var onListening = function() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

  console.log( 'Server listening on port', bind);
}
