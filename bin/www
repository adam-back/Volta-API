#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require( '../server' );
var http = require( 'http' );


var port = normalizePort( process.env.PORT || '3000' );
app.set( 'port', port );

var server = http.createServer( app );

// Create listeners
server.on( 'error', onError );
server.on('listening', onListening);

// Syncronize the models
models.sequelize.sync()
  // when sucessful
  .then(function() {
    // start to listen
    server.listen( port );
  });

// Normalize a port into a number, string, or false.
var normalizePort = function( val ) {
  var parsedPort = parseInt( val, 10 );

  if ( isNaN( parsedPort ) ) {
    // named pipe
    return val;
  }

  if ( parsedPort >= 0 ) {
    // port number
    return parsedPort;
  }

  return false;
};


// Event listener for HTTP server "error" event.
var onError = function( error ) {
  var bind; 
  var errorMessages = {
    'EACCES': ' requires elevated privileges.',
    'EADDRINUSE': ' is already in use.'
  };

  if ( error.syscall !== 'listen' ) {
    throw error;
  }

  if( typeof port === 'string' ) {
    bind = 'Pipe ' + port;
  } else {
    bind = 'Port ' + port;
  }

  // handle specific listen errors with friendly messages
  if ( errorMessages[ error.code ] ) {
    console.error( bind + errorMessages[ error.code ] );
    process.exit(1);
  } else {
    throw error;
  }

};

// Event listener for HTTP server "listening" event.
var onListening = function() {
  var address = server.address();
  var bind;

  if ( typeof address === 'string' ) {
    bind = 'pipe ' + address;
  } else {
    bind = 'port ' + address.port;
  }

  console.log( 'Server listening on port', bind);
}
